; I'm assuming that this is a pen-and-paper exercise, not to just be copy-pasted into the interpreter

(fold-right / 1 (list 1 2 3))

3 / 1 = 3;   2 / 3 = 2/3;  1 / (2/3) = 3/2; result is 3/2

(fold-left  / 1 (list 1 2 3))

1 / 1 = 1;  1 / 2 = 1/2;  1/2 / 3 = 1/6; result is 1/6

(fold-right list nil (list 1 2 3))

(list 3 nil) = '(3 nil);  (list 2 '(3 nil)) = '(2 (3)); ... result is '(1 (2 (3 nil))) 

(fold-left  list nil (list 1 2 3))

(list nil 1) = '(nil 1);  (list '(nil 1) 2) = '((nil 1) 2); ... result is '(((nil 1) 2) 3)

op should be symmetric (commutative) to guarantee the same result for fold-right and fold-left,
ie.
(= (op a b) (op b a)) for all a, b 
