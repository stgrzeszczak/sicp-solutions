(define square (lambda (x) (* x x)))
(define (expmod-or-zero base exp m)
      (define (nontrivial-sqrt-check n m)
        (if (and 
              (not (= n 1))
              (not (= n (- m 1)))
              (= (remainder (square n) m)  1)
              )
            0 n)
        )
      (cond ((= exp 0) 1)
            ((even? exp)
             (nontrivial-sqrt-check
              (remainder 
               (square (expmod-or-zero base (/ exp 2) m))
               m)
              m))
            (else
             (remainder 
              (* base (expmod-or-zero base (- exp 1) m))
              m))))

(define (is-congruent a n)
      (= (expmod-or-zero a (- n 1) n) 1))

(define (full-fermat-test n)
    (define (ifft a n)
      (cond ((= a n) #t)
        ((not (is-congruent a n))
         (display "test failed on ")
         (display a)
         (newline)
         #f)
        (else (ifft (+ a 1) n))
        )
      )
    (ifft 2 n))

(display "Fermat test for some primes: ")
(newline)
(display "(full-fermat-test 1009): ")
(display (full-fermat-test 1009))
(newline)
(display "(full-fermat-test 10037): ")
(display (full-fermat-test 10037))
(newline)
(display "(full-fermat-test 100019): ")
(display (full-fermat-test 1000199))
(newline)
(display "Fermat test for some Carmichael numbers: ")
(newline)
(display "(full-fermat-test 561): ")
(display (full-fermat-test 561))
(newline)
(display "(full-fermat-test 2821): ")
(display (full-fermat-test 2821))
(newline)
(display "(full-fermat-test 8911): ")
(display (full-fermat-test 8911))
(newline)
