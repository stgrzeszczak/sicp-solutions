(define (cont-frac n d k)
    (define (rcont-frac i)
      (if (= i k)
          (/ (n i) (d i))
          (/ (n i) (+ (d i) (rcont-frac (+ i 1))))
      ))
    (rcont-frac 1)
    )
(display "expected result: ")
(display ( / 2 (+ 1 (sqrt 5))))
(newline)
(display "test recursive with depth 8: ")
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 8))
(newline)
(display "test recursive with depth 18: ")
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 18))
(newline)
(display "test recursive with depth 14: ")
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 14))
(newline)
(display "test recursive with depth 10: ")
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 10))
(newline)
(display "test recursive with depth 11: ")
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 11))
(newline)
(define (icont-frac n d k)
    (define (icf i accu)
      (if (= i 0)
          accu
          (icf (- i 1) (/ (n i)
                          (+ (d i) accu)))
               ))
    (icf k 0)
    )
(display "test iterative with no. steps 11: ")
(display (icont-frac (lambda (i) 1.0) (lambda (i) 1.0) 11))
(newline)

