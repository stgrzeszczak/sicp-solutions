(define (square n) (* n n))
(define (fast-expt b n)
     (cond ((= n 0) 
            1)
           ((even? n) 
            (square (fast-expt b (/ n 2))))
           (else 
            (* b (fast-expt b (- n 1))))))
            
(define average (lambda (x y) (/ (+ x y) 2)))
(define (average-damp f)
     (lambda (x) 
       (average x (f x))))
       
(define tolerance 0.00001)
(define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
      (< (abs (- v1 v2)) 
         tolerance))
    (define (try guess)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try first-guess))
    
(define (compose f g) (lambda (x) (f (g x))))
(define (repeated f n)
     (define (irepeated fun i)
       (if (= i 1)
           fun
           (irepeated (compose fun f) (- i 1))
           ))
     (irepeated f n)
     )
(define (nthroot x n m)
     (fixed-point
       ((repeated average-damp m) (lambda (y) (/ x (fast-expt y (- n 1)))))
     1.0))
     
(display "(nthroot 2 2 1): ")
(display (nthroot 2 2 1))
(newline)
(display "(nthroot 2 3 1): ")
(display (nthroot 2 3 1))
(newline)
(display "(nthroot 2 4 2): ")
(display (nthroot 2 4 2))
(newline)
(display "(nthroot 2 7 2): ")
(display (nthroot 2 7 2))
(newline)
(display "(nthroot 2 8 3): ")
(display (nthroot 2 8 3))
(newline)
(display "(nthroot 2 15 3): ")
(display (nthroot 2 15 3))
(newline)
(display "(nthroot 2 16 4): ")
(display (nthroot 2 16 4))
; experimental conclusion: the number of required average damps for n-th root must be log2(n),
; otherwise the procedure does not converge
; or converges very slowly (in some cases)

